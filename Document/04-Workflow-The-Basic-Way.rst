Work Flow (工作流)
==============================================================================
对于Git新手想要最快上手, 并且完整体验工作流中碰到的各种情况, 建议安装两个图形界面软件: `Github Desktop <https://desktop.github.com/>`_ 和 `GitKraken <https://www.gitkraken.com/>`_, 用两个工作目录克隆同一个仓库进行试验。


Branch Work Flow
------------------------------------------------------------------------------
所有团队成员都在一个repository上工作, 使用branch的方式来完成feature的开发。各个成员的权限各不相同, 有代码的owner, reviewer, developer, 等等。

每次开会决定各人的任务, 然后各人为自己的任务建立一个branch, 然后开发完毕后各自提交pr, 等待reviewer审核通过或者修改后merge到master branch。

通常用于一个成员互相都认识的团队为同一个项目工作的情况。常用于公司环境中。


Fork Work Flow
------------------------------------------------------------------------------
开源项目常常将代码库host在GitHub上, 当有开发者想贡献代码时, 只要Fork原始仓库, 然后创建一个新的开发branch, 完成开发和测试后提交pr就好了。


Principle
------------------------------------------------------------------------------


原则1: 不要在master branch上进行开发
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
如题！


原则2：要尽量避免多个成员在各自的Pull Request中对同一个文件进行修改
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
简单来说就是，多个成员各自的branch的工作文件要分离, 而不能有重叠。

在此原则下，我们来看一个例子：

1. 1-1日, A和B都克隆了整个仓库, 并且从master分支上分别branch了一个fa, fb分支。
2. 1-2日, A完成了修改, 添加了文件a.txt, 提交了一个pr, 要求将fa分支merge到master, 并且当天就通过了。
3. 1-3日, B完成了修改, 添加了文件b.txt, 提交了一个pr, 要求将fb分支merge到master, 此时 **由于fb分支和fa分支没有任何冲突**, pull request提交的实际上是branch与master之间的差异, 而这个fb的差异和fa的差异毫无冲突, 所以可以 **顺利Merge**。
4. 在A, B都完成了修改之后, A的master缺少b.txt文件, B的master缺少a.txt文件, 此时在GitHub客户端只要点一下 ``sync`` 按钮, 就会自动将远程服务器上的Master的改变Merge到本地, 也就是更新到最新状态。此时如果有新的开发任务, 只要从 **当前的master** 上再创建一个新的开发branch即可。

如果违反此原则, 会发生什么:

1. 1-1日, A和B都克隆了整个仓库, 此时项目中有一个文件 ``readme.txt``, 并且从master分支上分别branch了一个fa, fb分支。
2. 1-2日, A将 ``readme.txt`` 内容修改为a, 并提交了一个pr, 当天就merge了。
3. 1-3日, B将 ``readme.txt`` 内容修改为b, 并提交了一个pr, 此pr就会触发一个conflict, 必须将冲突解决之后才能成功merge。
4. 如果两人要在此基础上进行新的开发, 同理只要 ``sync`` 远程仓库的改动, 就可以创建branch进行新的开发了。


Reference
------------------------------------------------------------------------------
- `起步 - 关于版本控制 <https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6>`_
